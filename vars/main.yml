---

awx_docker_compose_directory: /var/lib/awxcompose
awx_redis_socket_directory: '{{ awx_docker_compose_directory }}/redis_socket'
awx_secret_key_file_path: '{{ awx_docker_compose_directory }}/SECRET_KEY'

awx_postgres_hostname: awx-postgres
awx_postgres_port: 5432

awx_foreman_inventory:
  -

awx_compose_project:
  - project_name: awx
    pull: yes

    definition:
      version: '3.5'
      x-logging: &default-logging
        driver: journald

      services:
        awx-redis:
          image: redis
          container_name: awx-redis
          restart: unless-stopped
          environment:
            http_proxy: "{{ awx_http_proxy | default('') }}"
            https_proxy: "{{ awx_https_proxy | default('') }}"
            no_proxy: "{{ awx_no_proxy | default('') }}"
          command: ["/usr/local/etc/redis/redis.conf"]
          volumes:
            - "{{ awx_docker_compose_dir }}/redis.conf:/usr/local/etc/redis/redis.conf:ro"
            - "{{ awx_redis_socket_directory }}:/var/run/redis/:rw"

        aws-postgres:
          container_name: awx-postgres
          image: postgres:10
          hostname: '{{ awx_postgres_hostname }}'
          volumes:
            - "{{ awx_postgres_data_dir }}/10/data/:/var/lib/postgresql/data/pgdata:Z"
          environment:
            POSTGRES_USER: "{{ awx_postgres_username }}"
            POSTGRES_PASSWORD: "{{ awx_postgres_password }}"
            POSTGRES_DB: "{{ awx_postgres_database }}"
            PGDATA: "/var/lib/postgresql/data/pgdata"
            http_proxy: "{{ awx_http_proxy | default('') }}"
            https_proxy: "{{ awx_https_proxy | default('') }}"
            no_proxy: "{{ awx_no_proxy | default('') }}"
          logging:
            << : *default-logging
            options:
              tag: awx-postgres

        awx-web:
          container_name: awx-web
          image: "{{ awx_dockerhub_base }}/awx:{{ awx_dockerhub_version }}"
          depends_on:
            - awx-redis
            - awx-postgres
            - awx-task
          ports:
            - "{{ awx_host_port }}:8052"
          hostname: awx-web
          user: root
          volumes:
            - "{{ awx_docker_compose_dir }}/SECRET_KEY:/etc/tower/SECRET_KEY"
            - "{{ awx_docker_compose_dir }}/environment.sh:/etc/tower/conf.d/environment.sh"
            - "{{ awx_docker_compose_dir }}/credentials.py:/etc/tower/conf.d/credentials.py"
            - "{{ awx_docker_compose_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro"
            - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"
            - "{{ awx_project_data_dir }}:/var/lib/awx/projects:rw"
            - '/etc/localtime:/etc/localtime:ro'
          environment:
            http_proxy: "{{ awx_http_proxy | default('') }}"
            https_proxy: "{{ awx_https_proxy | default('') }}"
            no_proxy: "{{ awx_no_proxy | default('') }}"
          logging:
            << : *default-logging
            options:
              tag: awx-web

        awx-task:
          container_name: awx-task
          image: "{{ awx_dockerhub_base }}/awx:{{ awx_dockerhub_version }}"
          depends_on:
            - awx-redis
            - awx-postgres
          hostname: awx
          user: root
          command: /usr/bin/launch_awx_task.sh
          volumes:
            - "{{ awx_docker_compose_dir }}/SECRET_KEY:/etc/tower/SECRET_KEY"
            - "{{ awx_docker_compose_dir }}/environment.sh:/etc/tower/conf.d/environment.sh"
            - "{{ awx_docker_compose_dir }}/credentials.py:/etc/tower/conf.d/credentials.py"
            - "{{ awx_docker_compose_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro"
            - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"
            - "{{ awx_project_data_dir }}:/var/lib/awx/projects:rw"
            - '/etc/localtime:/etc/localtime:ro'
          environment:
            http_proxy: "{{ awx_http_proxy | default('') }}"
            https_proxy: "{{ awx_https_proxy | default('') }}"
            no_proxy: "{{ awx_no_proxy | default('') }}"
          logging:
            << : *default-logging
            options:
              tag: awx-task

foreman_system_users_groups:
  - name: foreman
    uid: 998
    gid: 998
    home_dir: /usr/share/foreman
    directories:
      - name: .ssh
        mode: '0755'
        files:
          - content: '{{ foreman_user_ssh_key_data }}'
            dest: id_rsa
            mode: '0600'
          - content: '{{ foreman_user_ssh_public_key_data }}'
            dest: id_rsa.pub
            mode: '0644'
  - name: foreman-proxy
    uid: 997
    gid: 997
    home_dir: /usr/share/foreman-proxy
    directories:
      - name: .ssh
        mode: '0755'
        files:
          - content: '{{ foreman_proxy_ssh_key_data }}'
            dest: id_rsa_foreman_proxy
            mode: '0600'
          - content: '{{ foreman_proxy_ssh_public_key_data }}'
            dest: id_rsa_foreman_proxy.pub
            mode: '0644'

foreman_base_options:
  - enable-foreman-cli-ansible
  - enable-foreman-cli-discovery
  - enable-foreman-plugin-ansible
  - enable-foreman-plugin-discovery
  - enable-foreman-proxy-plugin-ansible
  - enable-foreman-proxy-plugin-discovery
  - 'foreman-initial-admin-username={{ foreman_username }}'
  - 'foreman-initial-admin-password={{ foreman_password }}'

foreman_options: |-
  {{
    foreman_base_options
      + (['enable-foreman-compute-'] | product(foreman_compute_plugins) | map('join') | list)
  }}

foreman_auth_sources_ldap: |
  {%- set ns = namespace(items=[]) -%}
  {%- for ldap_authentication in ldap_authentication_sources -%}
    {%- set ns.items = ns.items + [
          {
            'name': ldap_authentication.name,
            'host': ldap_authentication.host,
            'port': ldap_authentication.server_port,
            'tls': ldap_authentication.server_tls,
            'onthefly_register': True,
            'server_type': 'posix',
            'account': ldap_authentication.account,
            'account_password': ldap_authentication.account_password,
            'base_dn': ldap_authentication.base_dn,
            'groups_base': ldap_authentication.groups_base,
            'attr_login': ldap_authentication.attr_login,
            'attr_firstname': ldap_authentication.attr_firstname,
            'attr_lastname': ldap_authentication.attr_lastname,
            'attr_mail': ldap_authentication.attr_mail,
            'usergroup_sync': True,
            'organizations': ldap_authentication.organizations
                | default([])
            'locations': organizations
                | selectattr('name', 'in', ldap_authentication.organizations | default([]))
                | map(attribute='locations', default=[])
                | flatten
                | default([])
          }
        ]
    -%}
  {%- endfor -%}
  {{ ns.items }}

awx_auth_sources_ldap: |
  {%- set ns=namespace(items=[], org_map={}) -%}
  {%- for ldap_authentication in ldap_authentication_sources -%}
    {%- set ldap_number = '' if loop.index0 == 0 else ((loop.index0 | string) ~ '_') -%}
    {%- set prefix = 'AUTH_LDAP_' ~ ldap_number -%}
    {%- set ns.org_map = {} -%}
    {%- for org in ldap_authentication.organizations -%}
      {%- set ns.org_map = ns.org_map | combine(
          {
            org.name: {
              'admins': 'cn=' ~ org.admin_group_cn ~ ',' ~ ldap_authentication.groups_base,
              'users': 'cn=' ~ org.user_group_cn ~ ',' ~ ldap_authentication.groups_base,
              'remove_users': False,
              'remove_admins': False
            }
          }
        )
      -%}
    {%- endfor -%}
    {%- set ns.items = ns.items + [
          {
            'name': prefix ~ 'SERVER_URI',
            'value': 'ldap://' ~ ldap_authentication.host ~ ':' ~ ldap_authentication.port
          },
          {
            'name': prefix ~ 'BIND_DN',
            'value': ldap_authentication.account
          },
          {
            'name': prefix ~ 'BIND_PASSWORD',
            'value': ldap_authentication.account_password
          },
          {
            'name': prefix ~ 'GROUP_TYPE',
            'value': 'PosixGroupType'
          },
          {
            'name': prefix ~ 'GROUP_TYPE_PARAMS',
            'value': {
              'name_attr': cn
            }
          },
          {
            'name': prefix ~ 'USER_SEARCH',
            'value': [
              ldap_authentication.users_base,
              'SCOPE_SUBTREE',
              '(uid=%(user)s)'
            ]
          },
          {
            'name': prefix ~ 'GROUP_SEARCH',
            'value': [
              ldap_authentication.groups_base,
              'SCOPE_SUBTREE',
              '(objectClass=posixGroup)'
            ]
          },
          {
            'name': prefix ~ 'USER_ATTR_MAP',
            'value': {
              'first_name': ldap_authentication.attr_firstname,
              'last_name': ldap_authentication.attr_lastname,
              'email': ldap_authentication.attr_mail
            }
          },
          {
            'name': prefix ~ 'ORGANIZATION_MAP',
            'value': ns.org_map
          }
        ]
  {%- endfor -%}
  {{ ns.items }}
